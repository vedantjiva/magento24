<?xml version="1.0" encoding="UTF-8"?>
<!--
 /**
  * Copyright Â© Magento, Inc. All rights reserved.
  * See COPYING.txt for license details.
  */
-->

<tests xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xsi:noNamespaceSchemaLocation="urn:magento:mftf:Test/etc/testSchema.xsd">
    <test name="OnePageCheckoutAsRegisteredUSCustomerUsingRewardPointsGiftCardCouponForAllCustomerGroupsTest">
        <annotations>
            <features value="OnePageCheckout"/>
            <stories value="OnePageCheckout within Offline Payment Methods"/>
            <title value="OnePageCheckout as registered US customer using reward points gift card coupon for all customer groups test"/>
            <description value="Checkout as registered US customer using reward points, gift card and coupon for all customer groups"/>
            <severity value="CRITICAL"/>
            <testCaseId value="MC-14746"/>
            <group value="reward"/>
            <group value="mtf_migrated"/>
        </annotations>
        <before>
            <!-- Create Simple Product -->
            <createData entity="SimpleProduct2" stepKey="createSimpleProduct">
                <field key="price">560</field>
            </createData>

            <!-- Create Virtual Product -->
            <createData entity="VirtualProduct" stepKey="createVirtualProduct">
                <field key="price">10</field>
            </createData>

            <!-- Create gift card code pool -->
            <createData entity="GiftCardCodePool" stepKey="createCodePool"/>

            <!-- Create gift card account -->
            <createData entity="GiftCardAccount100" stepKey="createGiftCard"/>

            <!-- Create customer -->
            <createData entity="Simple_Customer_Without_Address" stepKey="createCustomer"/>

            <!-- Create sales rule -->
            <createData entity="ActiveSalesRuleForAllGroups" stepKey="createCartPriceRule"/>
            <createData entity="SimpleSalesRuleCoupon" stepKey="createCouponForCartPriceRule">
                <requiredEntity createDataKey="createCartPriceRule"/>
            </createData>

            <!-- Enable free shipping -->
            <createData entity="FreeShippingMethodsSettingConfig" stepKey="freeShippingMethodsSettingConfig"/>

            <!-- Enable payment method -->
            <magentoCLI command="config:set {{BankTransferEnableConfigData.path}} {{BankTransferEnableConfigData.value}}" stepKey="enableBankTransfer"/>

            <!-- Login as admin -->
            <actionGroup ref="AdminLoginActionGroup" stepKey="loginAsAdmin"/>

            <!--Adding reward points to previously created Customer -->
            <actionGroup ref="AdminApplyRewardPointsActionGroup" stepKey="applyRewardPointsToCustomer">
                <argument name="customerId" value="$$createCustomer.id$$"/>
                <argument name="rewards" value="5"/>
            </actionGroup>

            <!--Creating exchange rate - Points to Currency -->
            <actionGroup ref="AdminCreatePointsToCurrencyRateActionGroup" stepKey="createPointsToCurrencyRateActionGroup">
                <argument name="rate1" value="1"/>
                <argument name="rate2" value="1"/>
            </actionGroup>

            <!--Creating exchange rate - Currency to Points -->
            <actionGroup ref="AdminCreateCurrencyToPointsRateActionGroup" stepKey="createCurrencyToPointsRateActionGroup">
                <argument name="rate1" value="1"/>
                <argument name="rate2" value="1"/>
            </actionGroup>
        </before>
        <after>
            <!-- Disabled payment method -->
            <magentoCLI command="config:set {{BankTransferDisabledConfigData.path}} {{BankTransferDisabledConfigData.value}}" stepKey="disabledBankTransfer"/>

            <!-- Delete reward exchange rates -->
            <actionGroup ref="AdminDeleteRewardExchangeRateActionGroup" stepKey="deleteFirstRewardExchangeRate"/>
            <actionGroup ref="AdminDeleteRewardExchangeRateActionGroup" stepKey="deleteSecondRewardExchangeRate"/>

            <!-- Customer and admin logout -->
            <actionGroup ref="AdminLogoutActionGroup" stepKey="logout"/>
            <actionGroup ref="StorefrontCustomerLogoutActionGroup" stepKey="customerLogout"/>

            <!-- Delete created product -->
            <deleteData createDataKey="createSimpleProduct" stepKey="deleteSimpleProduct"/>
            <deleteData createDataKey="createVirtualProduct" stepKey="deleteVirtualProduct"/>

            <!-- Delete sales rule -->
            <deleteData createDataKey="createCartPriceRule" stepKey="deleteCartPriceRule"/>

            <!-- Delete customer -->
            <deleteData createDataKey="createCustomer" stepKey="deleteCustomer"/>

            <!-- Disable free shipping -->
            <createData entity="DefaultShippingMethodsConfig" stepKey="defaultShippingMethodsConfig"/>
            <createData entity="DisableFreeShippingConfig" stepKey="disableFreeShippingConfig"/>
        </after>

        <!-- Check gift card and grab generated code -->
        <amOnPage url="{{AdminGiftCardAccountGridPage.url}}" stepKey="goToAccountGrid"/>
        <waitForPageLoad stepKey="waitForGiftCardAccountPageLoad"/>
        <actionGroup ref="SortByIdDescendingActionGroup" stepKey="sortAccountsByIdDesc"/>
        <click selector="{{AdminGridTableSection.row('1')}}" stepKey="clickPrereqAccount"/>
        <waitForPageLoad stepKey="waitForAccountEditPage"/>
        <grabTextFrom selector="{{AdminGiftCardAccountInformationSection.giftCardCode}}" stepKey="giftCardAccountCode"/>

        <!-- Add Simple Product to cart -->
        <amOnPage url="{{StorefrontProductPage.url($$createSimpleProduct.custom_attributes[url_key]$$)}}" stepKey="navigateToSimpleProductPage"/>
        <waitForPageLoad stepKey="waitForSimpleProductPageLoad"/>
        <actionGroup ref="AddToCartFromStorefrontProductPageActionGroup" stepKey="addToCartSimpleProductFromStorefrontProductPage">
            <argument name="productName" value="$$createSimpleProduct.name$$"/>
        </actionGroup>

        <!-- Add Virtual Product to cart -->
        <amOnPage url="{{StorefrontProductPage.url($$createVirtualProduct.custom_attributes[url_key]$$)}}" stepKey="navigateToVirtualProductPage"/>
        <waitForPageLoad stepKey="waitForVirtualProductPageLoad"/>
        <actionGroup ref="AddToCartFromStorefrontProductPageActionGroup" stepKey="addToCartVirtualProductFromStorefrontProductPage">
            <argument name="productName" value="$$createVirtualProduct.name$$"/>
        </actionGroup>

        <!-- Go to shopping cart -->
        <actionGroup ref="ClickViewAndEditCartFromMiniCartActionGroup" stepKey="goToShoppingCartFromMinicart"/>
        <actionGroup ref="FillShippingZipForm" stepKey="fillShippingZipForm">
            <argument name="address" value="US_Address_CA"/>
        </actionGroup>

        <!-- Apply gift card to order -->
        <actionGroup ref="AddGiftCardToOrderFromCartActionGroup" stepKey="applyGiftCardToOrder">
            <argument name="code" value="$giftCardAccountCode"/>
        </actionGroup>
        <click selector="{{CheckoutCartSummarySection.proceedToCheckout}}" stepKey="clickProceedToCheckout"/>
        <waitForPageLoad stepKey="waitForProceedToCheckout"/>

        <!-- Login as customer on checkout page -->
        <actionGroup ref="LoginAsCustomerOnCheckoutPageActionGroup" stepKey="customerLogin">
            <argument name="customer" value="$$createCustomer$$"/>
        </actionGroup>

        <!-- Fill customer new shipping address -->
        <actionGroup ref="CustomerCheckoutFillNewShippingAddressActionGroup" stepKey="fillShippingAddress">
            <argument name="address" value="US_Address_TX"/>
        </actionGroup>

        <!-- Select free shipping -->
        <scrollTo selector="{{CheckoutShippingMethodsSection.next}}" stepKey="scrollToShippingRate"/>
        <click selector="{{CheckoutShippingMethodsSection.shippingMethodFreeShipping}}" stepKey="selectShippingMethod"/>

        <!-- Click next button to open payment section -->
        <click selector="{{CheckoutShippingGuestInfoSection.next}}" stepKey="clickNext"/>
        <waitForPageLoad stepKey="waitForShipmentPageLoad"/>

        <!-- Check order summary in checkout -->
        <waitForElement selector="{{CheckoutPaymentSection.paymentSectionTitle}}" stepKey="waitForPaymentSectionLoaded"/>

        <!-- Use reward points -->
        <actionGroup ref="StorefrontCheckoutUsingRewardPointsActionGroup" stepKey="checkoutUseRewardPoints">
            <argument name="rewards" value="5"/>
            <argument name="rewardsUsing" value="5"/>
        </actionGroup>

        <!-- Apply coupon -->
        <actionGroup ref="ApplyCouponOnPaymentPageActionGroup" stepKey="applyCoupon">
            <argument name="couponCode" value="$$createCouponForCartPriceRule.code$$"/>
        </actionGroup>

        <!-- Select payment method -->
        <click selector="{{StorefrontCheckoutPaymentMethodsSection.bankTransfer}}" stepKey="selectBankTransferMethod"/>
        <click selector="{{CheckoutPaymentSection.placeOrder}}" stepKey="clickPlaceOrderButton"/>

        <!-- Check order summary in checkout -->
        <seeElement selector="{{CheckoutSuccessMainSection.success}}" stepKey="orderIsSuccessfullyPlaced"/>
        <grabTextFrom selector="{{CheckoutSuccessMainSection.orderNumber22}}" stepKey="grabOrderNumber"/>

        <!-- Check that the mini cart is empty -->
        <actionGroup ref="AssertMiniCartEmptyActionGroup" stepKey="assertMiniCartEmpty"/>

        <!-- Open created order in backend -->
        <amOnPage url="{{AdminOrdersPage.url}}" stepKey="goToOrders"/>
        <waitForPageLoad stepKey="waitForPageLoad"/>
        <actionGroup ref="OpenOrderByIdActionGroup" stepKey="filterOrderGridById">
            <argument name="orderId" value="$grabOrderNumber"/>
        </actionGroup>

        <!-- Assert order status is correct -->
        <see selector="{{AdminOrderDetailsInformationSection.orderStatus}}" userInput="Pending" stepKey="seeOrderStatus"/>

        <!-- Assert order buttons available -->
        <actionGroup ref="AssertOrderButtonsAvailableActionGroup" stepKey="assertOrderButtonsAvailable"/>

        <!-- Assert order grand total -->
        <amOnPage url="{{StorefrontCustomerDashboardPage.url}}" stepKey="navigateToCustomerDashboardPage"/>
        <waitForPageLoad stepKey="waitForCustomerDashboardPageLoad"/>
        <see selector="{{StorefrontCustomerRecentOrdersSection.orderTotal}}" userInput="$180.00" stepKey="checkOrderTotalInStorefront"/>

        <!-- Delete gift card account -->
        <actionGroup ref="DeleteGiftCardAccountActionGroup" stepKey="deleteGiftCardAccount">
            <argument name="giftCardAccountCode" value="$giftCardAccountCode"/>
        </actionGroup>
    </test>
</tests>
