<?php
/**
 * Copyright Â© Magento, Inc. All rights reserved.
 * See COPYING.txt for license details.
 */

/**
 * @var \Magento\CustomerCustomAttributes\Block\Adminhtml\Customer\Attribute\Edit\Js $block
 * @var \Magento\Framework\View\Helper\SecureHtmlRenderer $secureRenderer
 */
/** @var \Magento\Framework\Json\Helper\Data $jsonHelper */
$jsonHelper = $block->getData('jsonHelper');
$validateFilters = $block->getValidateFiltersJson();
$filterTypes = $block->getFilteTypesJson();
?>
<?php $scriptString = <<<script
require(['uiRegistry', 'jquery', 'prototype'], function(registry, jQuery){

//<![CDATA[
var show_option_panel           = false;
var attribute_validate_filters  = {$validateFilters};
var attribute_filter_types      = {$filterTypes};

toggleApplyVisibility = function(select) {
    if ($(select).value == 1) {
        $(select).next('select').removeClassName('no-display');
        $(select).next('select').removeClassName('ignore-validate');

    } else {
        $(select).next('select').addClassName('no-display');
        $(select).next('select').addClassName('ignore-validate');
        var options = $(select).next('select').options;
        for( var i=0; i < options.length; i++) {
            options[i].selected = false;
        }
    }
}

bindAttributeInputType = function()
{
    switchDefaultValueField();
}

switchFilterSelect = function(id, vals, dict)
{
    if ($(id)) {
        if (vals) {
            var value = $(id).value;
            $(id).up(1).show();
            for (var i = $(id).length - 1; i >= 0; i--) {
                if (i != 0) {
                    $(id).remove(i);
                }
            }
            vals.each(function(e, index){
                $(id).options[index + 1] = new Option(dict[e], e);
                if (e == value) {
                    $(id).options[index + 1].selected = true;
                }
            }.bind(this));
        } else {
            $(id).up(1).hide();
        }
    }
}

getFormsToUseInOptions = function () {
    let selectedOptions = [];
    _.each($('used_in_forms').options, function (element) {
        if (element.getAttribute('selected') === 'selected') {
            selectedOptions.push(element);
        }
    });
    return selectedOptions;
}

setFormsToUseInRequired = function () {
    let usedInForms = $('used_in_forms');
    let isVisible = $('is_visible').value;
    let isRequired = $('is_required').value;
    if (isVisible === '1' && isRequired === '1') {
        usedInForms.up('div.field').addClassName('required required-entry');
        usedInForms.addClassName('required');
        let formOptions = getFormsToUseInOptions();
        if (formOptions.length === 0) {
            _.each(usedInForms.options, function (element) {
                element.setAttribute('selected', 'selected');
            });
        }
    } else {
        usedInForms.up('div.field').removeClassName('required required-entry');
        usedInForms.removeClassName('required');
    }
}

switchDefaultValueField = function()
{
    if (!$('frontend_input')) {
        return;
    }

    var currentValue = $('frontend_input').value;

    var show_default_value_text     = false;
    var show_default_value_textarea = false;
    var show_default_value_date     = false;
    var show_default_value_yesno    = false;

    show_option_panel               = false;
    var panel_default_value_type    = null;

    var show_multiline_count        = false;
    var show_max_file_size          = false;
    var show_file_extensions        = false;
    var show_max_image_width        = false;
    var show_max_image_heght        = false;

    var select_filter_types         = false;
    var select_validate_filters     = false;

    switch (currentValue) {
script;
foreach ($block->getAttributeInputTypes() as $type => $prop) {
    $escapedType = $block->escapeJs($type);
    $scriptString .= "case '{$escapedType}':";
    foreach ($prop['validate_types'] as $vt) {
        $scriptString .= 'show_' . $block->escapeJs($vt) . ' = true;';
    }
    if ($type == 'multiline') {
        $scriptString .= 'show_multiline_count = true;';
    }
    if ($prop['manage_options']) {
        $scriptString .= 'show_option_panel = true;
                    panel_default_value_type = \'' . $block->escapeJs($prop['option_default']) . '\';';
    }
    if ($prop['default_value']) {
        $scriptString .= 'show_default_value_' . $block->escapeJs($prop['default_value']) . ' = true;';
    }
    if ($prop['filter_types']) {
        $scriptString .= 'select_filter_types = ' . $jsonHelper->jsonEncode($prop['filter_types']) . ';';
    }
    if ($prop['validate_filters']) {
        $scriptString .= 'select_validate_filters = ' . $jsonHelper->jsonEncode($prop['validate_filters']) . ';';
    }
    $scriptString .= 'break;';
}
$scriptString .= '}';

$scriptString .= <<<script
    switchFilterSelect('input_validation', select_validate_filters, attribute_validate_filters);
    switchFilterSelect('input_filter', select_filter_types, attribute_filter_types);

    setRowVisibility('default_value_text', show_default_value_text);
    setRowVisibility('default_value_textarea', show_default_value_textarea);
    setRowVisibility('default_value_date', show_default_value_date);
    setRowVisibility('default_value_yesno', show_default_value_yesno);

    setRowVisibility('multiline_count', show_multiline_count);
    if ($('multiline_count')) {
        var use_default_multiline_count = ($$('[name="use_default[]"][value="multiline_count"]:checked').length > 0);
        if (show_multiline_count) {
            $('multiline_count').disabled = use_default_multiline_count;
        } else {
            $('multiline_count').disabled = true;
        }
    }

    setFormsToUseInRequired();
    switchInputValidation('input_validation');
    setRowVisibility('max_file_size', show_max_file_size);
    setRowVisibility('file_extensions', show_file_extensions);
    setRowVisibility('max_image_width', show_max_image_width);
    setRowVisibility('max_image_heght', show_max_image_heght);
    setRowVisibility('date_range_min', show_default_value_date);
    setRowVisibility('date_range_max', show_default_value_date);

    var panel = $('manage-options-panel'),
        activePanelClass = 'selected-type-options';
    if (show_option_panel) {
        $(panel).up().show();
        jQuery(panel).addClass(activePanelClass);
        registry.get('manage-options-panel', function () {
            jQuery('#manage-options-panel').trigger('render');
        });
    } else {
        $(panel).up().hide();
        jQuery(panel).removeClass(activePanelClass);
    }
}

setRowVisibility = function(id, isVisible)
{
    if ($(id)) {
        var tr = $(id).up(1);

        if (isVisible) {
            tr.show();
        } else {
            tr.blur();
            tr.hide();
        }
    }
}

updateRequriedOptions = function()
{
    if (show_option_panel && \$F('is_required') == 1) {
        $('option-count-check').addClassName('required-options-count');
    } else {
        $('option-count-check').removeClassName('required-options-count');
    }
}

var switchInputValidation = function(event)
{
    var elem = event.target || $(event),
        val = elem.value,
        regExp = new RegExp('([^\\s*]+)','g'),
        minTextLength = 'min_text_length',
        maxTextLength = 'max_text_length',
        showSwitcher = regExp.test(val);

        setRowVisibility(minTextLength, showSwitcher);
        setRowVisibility(maxTextLength, showSwitcher);
}

if ($('input_validation')){
    Event.observe($('input_validation'), 'change', switchInputValidation);
}

if($('frontend_input')){
    Event.observe($('frontend_input'), 'change', updateRequriedOptions);
    Event.observe($('frontend_input'), 'change', bindAttributeInputType);
}

if ($('is_required')) {
    Event.observe($('is_required'), 'change', updateRequriedOptions);
}
bindAttributeInputType();

window.switchDefaultValueField = switchDefaultValueField;
//]]>

});
script;
?>
<?= /* @noEscape */ $secureRenderer->renderTag('script', [], $scriptString, false); ?>
