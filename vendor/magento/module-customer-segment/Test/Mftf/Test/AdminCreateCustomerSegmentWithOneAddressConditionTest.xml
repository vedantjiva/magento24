<?xml version="1.0" encoding="UTF-8"?>
<!--
 /**
  * Copyright Â© Magento, Inc. All rights reserved.
  * See COPYING.txt for license details.
  */
-->

<tests xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xsi:noNamespaceSchemaLocation="urn:magento:mftf:Test/etc/testSchema.xsd">
    <test name="AdminCreateCustomerSegmentWithOneAddressConditionTest">
        <annotations>
            <stories value="Create Customer Segment Entity With Customer Conditions"/>
            <title value="Create customer segment with one customer address condition"/>
            <description value="Admin should be able to create customer segment with one customer address condition"/>
            <severity value="CRITICAL"/>
            <testCaseId value="MC-14531"/>
            <group value="CustomerSegment"/>
            <group value="mtf_migrated"/>
        </annotations>
        <before>
            <actionGroup ref="AdminLoginActionGroup" stepKey="adminLogin"/>
            <createData entity="Simple_US_Customer" stepKey="createCustomer"/>
            <createData entity="_defaultCategory" stepKey="createCategory"/>
            <createData entity="_defaultProduct" stepKey="createProduct">
                <field key="price">10</field>
                <field key="quantity">1000</field>
                <requiredEntity createDataKey="createCategory"/>
            </createData>
        </before>
        <after>
            <deleteData createDataKey="createCategory" stepKey="deleteCategory"/>
            <deleteData createDataKey="createProduct" stepKey="deleteProduct"/>
            <deleteData createDataKey="createCustomer" stepKey="deleteCustomer"/>
            <actionGroup ref="AdminDeleteCartPriceRuleActionGroup" stepKey="deleteCartPriceRule">
                <argument name="ruleName" value="SegmentCartPriceRule" />
            </actionGroup>
            <actionGroup ref="FindAndDeleteCustomerSegmentActionGroup" stepKey="deleteSegment">
                <argument name="segmentName" value="{{CustomerSegmentDefault.name}}"/>
            </actionGroup>
            <actionGroup ref="AdminLogoutActionGroup" stepKey="adminLogout"/>
        </after>

        <!--Navigate to CUSTOMERS->Segment > Click 'Add Segment' button-->
        <actionGroup ref="CreateCustomerSegmentWithContinueEditActionGroup" stepKey="createCustomerSegment">
            <argument name="customerSegment" value="CustomerSegmentDefault"/>
        </actionGroup>

        <!-- Fill all fields according to dataset -->
        <click selector="{{AdminCustomerSegmentEditSection.conditionsTab}}" stepKey="proceedToConditionsTab"/>
        <waitForLoadingMaskToDisappear stepKey="waitForLoadingMaskToDisappear"/>
        <click selector="{{AdminCustomerSegmentConditionsEditSection.addCondition}}" stepKey="clickToAddCondition" />

        <!-- Add condition {Customer Address|ANY:[City|is|Customer City]} -->
        <selectOption userInput="Customer Address" selector="{{AdminCustomerSegmentConditionsEditSection.conditions}}" stepKey="selectCondition"/>
        <waitForPageLoad stepKey="waitForConditionsToAppear"/>
        <click selector="{{AdminCustomerSegmentConditionsEditSection.conditionValueChooserParam('1','ALL')}}" stepKey="openSelectorAll"/>
        <selectOption userInput="ANY" selector="{{AdminCustomerSegmentConditionsEditSection.conditionTypeValue}}" stepKey="selectANY"/>
        <actionGroup ref="FillAddressConditionWithIsInCustomerSegmentActionGroup" stepKey="1stCondition">
            <argument name="index" value="1"/>
            <argument name="conditionDegree" value="1--1--1"/>
            <argument name="attribute" value="City"/>
            <argument name="valueCondition" value="{{US_Address_TX.city}}"/>
        </actionGroup>
        <click selector="{{AdminMainActionsSection.saveAndContinue}}" stepKey="saveSegment"/>
        <see userInput="You saved the segment." selector="{{AdminMessagesSection.success}}" stepKey="checkSuccessMessage"/>
        <actionGroup ref="CliConsumerStartActionGroup" stepKey="startMessageQueue">
            <argument name="consumerName" value="{{AdminCustomerSegmentConsumerData.consumerName}}"/>
            <argument name="maxMessages" value="{{AdminCustomerSegmentConsumerData.messageLimit}}"/>
        </actionGroup>
        <reloadPage stepKey="refreshPage"/>
        <waitForPageLoad stepKey="waitForPageLoaded"/>
        <actionGroup ref="AdminCheckCustomerInSegmentActionGroup" stepKey="checkCustomerInSegment">
            <argument name="customer" value="$createCustomer$"/>
        </actionGroup>

        <!-- Navigate to MARKETING > Cart Price Rule and click "+", then fill all required data according to dataset and save rule -->
        <actionGroup ref="AdminCreateCartPriceRuleAndStayOnEditActionGroup" stepKey="createCartPriceRule">
            <argument name="ruleName" value="SegmentCartPriceRule"/>
        </actionGroup>

        <actionGroup ref="SetCartAttributeConditionWhenMatchForCartPriceRuleActionGroup" stepKey="setSegment">
            <argument name="attributeName" value="Customer Segment"/>
            <argument name="operatorType" value="does not match"/>
            <argument name="value" value="CustomerSegmentDefault"/>
        </actionGroup>

        <magentoCron stepKey="runCronIndex" groups="index"/>

        <!--Perform assertions-->
        <actionGroup ref="LoginToStorefrontActionGroup" stepKey="loginAsCustomer">
            <argument name="Customer" value="$createCustomer$"/>
        </actionGroup>

        <amOnPage url="{{StorefrontCategoryPage.url($createCategory.name$)}}" stepKey="onCategoryPage"/>
        <waitForPageLoad stepKey="waitForCategoryPageLoad"/>

        <actionGroup ref="StorefrontAddSimpleProductToCartActionGroup" stepKey="addProductToCart">
            <argument name="product" value="$createProduct$"/>
        </actionGroup>

        <!-- Check that total price $15.00 in Cart -->
        <actionGroup ref="StorefrontOpenCartFromMinicartActionGroup" stepKey="openCart"/>
        <waitForLoadingMaskToDisappear stepKey="waitForPricesLoading"/>
        <wait time="10" stepKey="waitForTotalPrice"/>
        <see selector="{{CheckoutCartSummarySection.total}}" userInput="$15.00" stepKey="assertTotal"/>
    </test>
</tests>
