<?xml version="1.0" encoding="UTF-8"?>
<!--
 /**
  * Copyright Â© Magento, Inc. All rights reserved.
  * See COPYING.txt for license details.
  */
-->

<tests xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xsi:noNamespaceSchemaLocation="urn:magento:mftf:Test/etc/testSchema.xsd">
    <test name="AdminCreateCustomerSegmentWithMultipleAddressConditionsTest">
        <annotations>
            <stories value="Create Customer Segment Entity With Customer Conditions"/>
            <title value="Create customer segment entity with multiple customer address conditions."/>
            <description value="Admin should be able to create customer segment with customer address conditions"/>
            <severity value="CRITICAL"/>
            <testCaseId value="MC-14532"/>
            <group value="CustomerSegment"/>
            <group value="mtf_migrated"/>
        </annotations>
        <before>
            <actionGroup ref="AdminLoginActionGroup" stepKey="LoginAsAdmin"/>
            <!--Test customer is created-->
            <createData entity="Simple_US_Customer" stepKey="createCustomer"/>
            <!--Test simple product is created-->
            <createData entity="_defaultCategory" stepKey="createCategory"/>
            <createData entity="_defaultProduct" stepKey="createProduct">
                <field key="price">10</field>
                <field key="quantity">1000</field>
                <requiredEntity createDataKey="createCategory"/>
            </createData>
        </before>
        <after>
            <deleteData createDataKey="createCategory" stepKey="deleteCategory"/>
            <deleteData createDataKey="createProduct" stepKey="deleteProduct"/>
            <deleteData createDataKey="createCustomer" stepKey="deleteCustomer"/>
            <actionGroup ref="AdminDeleteCartPriceRuleActionGroup" stepKey="deleteCartPriceRule">
                <argument name="ruleName" value="SegmentCartPriceRule"/>
            </actionGroup>
            <actionGroup ref="FindAndDeleteCustomerSegmentActionGroup" stepKey="deleteSegment">
                <argument name="segmentName" value="{{CustomerSegmentDefault.name}}"/>
            </actionGroup>
            <actionGroup ref="AdminLogoutActionGroup" stepKey="logout"/>
        </after>

        <!--Navigate to CUSTOMERS->Segment > Click 'Add Segment' button-->
        <actionGroup ref="CreateCustomerSegmentWithContinueEditActionGroup" stepKey="createCustomerSegment">
            <argument name="customerSegment" value="CustomerSegmentDefault"/>
        </actionGroup>

        <!-- Fill all fields according to dataset -->
        <click selector="{{AdminCustomerSegmentEditSection.conditionsTab}}" stepKey="proceedToConditionsTab"/>
        <waitForLoadingMaskToDisappear stepKey="waitForLoadingMaskToDisappear"/>
        <click selector="{{AdminCustomerSegmentConditionsEditSection.addCondition}}" stepKey="clickToAddCondition"/>

        <!-- Add condition {Customer Address|ANY:[City|is|Culver City]} -->
        <selectOption userInput="Customer Address" selector="{{AdminCustomerSegmentConditionsEditSection.conditions}}" stepKey="selectCondition"/>
        <waitForPageLoad stepKey="waitForConditionsToAppear"/>
        <click selector="{{AdminCustomerSegmentConditionsEditSection.conditionValueChooserParam('1','ALL')}}" stepKey="openSelectorAll"/>
        <selectOption userInput="ANY" selector="{{AdminCustomerSegmentConditionsEditSection.conditionTypeValue}}" stepKey="selectANY"/>
        <actionGroup ref="FillAddressConditionWithIsInCustomerSegmentActionGroup" stepKey="1stCondition">
            <argument name="index" value="1"/>
            <argument name="conditionDegree" value="1--1--1"/>
            <argument name="attribute" value="City"/>
            <argument name="valueCondition" value="Culver City"/>
        </actionGroup>
        <!-- Add condition  {Customer Address:[Company|is|%company%]} -->
        <actionGroup ref="FillAddressConditionWithIsInCustomerSegmentActionGroup" stepKey="2ndCondition">
            <argument name="index" value="2"/>
            <argument name="conditionDegree" value="1--1--2"/>
            <argument name="attribute" value="Company"/>
            <argument name="valueCondition" value="{{US_Address_TX.company}}"/>
        </actionGroup>
        <!-- Add condition {Customer Address:[Country|is|United States]} -->
        <actionGroup ref="SelectAddressConditionWithIsInCustomerSegmentActionGroup" stepKey="3rdCondition">
            <argument name="index" value="3"/>
            <argument name="conditionDegree" value="1--1--3"/>
            <argument name="attribute" value="Country"/>
            <argument name="valueCondition" value="United States"/>
        </actionGroup>
        <!-- Add condition {Customer Address:[First Name|is|John]} -->
        <actionGroup ref="FillAddressConditionWithIsInCustomerSegmentActionGroup" stepKey="4thCondition">
            <argument name="index" value="4"/>
            <argument name="conditionDegree" value="1--1--4"/>
            <argument name="attribute" value="First Name"/>
            <argument name="valueCondition" value="John"/>
        </actionGroup>
        <!-- Add condition {Customer Address:[Last Name|is|Doe]} -->
        <actionGroup ref="FillAddressConditionWithIsInCustomerSegmentActionGroup" stepKey="5thCondition">
            <argument name="index" value="5"/>
            <argument name="conditionDegree" value="1--1--5"/>
            <argument name="attribute" value="Last Name"/>
            <argument name="valueCondition" value="Doe"/>
        </actionGroup>
        <!-- Add condition {Customer Address:[State/Province|is|%province%]} -->
        <actionGroup ref="SelectAddressConditionWithIsInCustomerSegmentActionGroup" stepKey="6thCondition">
            <argument name="index" value="6"/>
            <argument name="conditionDegree" value="1--1--6"/>
            <argument name="attribute" value="State/Province"/>
            <argument name="valueCondition" value="{{US_Address_TX.state}}"/>
        </actionGroup>
        <!-- Add condition {Customer Address:[Street Address|is|%address%]} -->
        <actionGroup ref="FillAddressConditionWithIsInCustomerSegmentActionGroup" stepKey="7thCondition">
            <argument name="index" value="7"/>
            <argument name="conditionDegree" value="1--1--7"/>
            <argument name="attribute" value="Street Address"/>
            <argument name="valueCondition" value="{{US_Address_TX.street[0]}}"/>
        </actionGroup>
        <!-- Add condition {Customer Address:[Phone Number|is|%telephone%]} -->
        <actionGroup ref="FillAddressConditionWithIsInCustomerSegmentActionGroup" stepKey="8thCondition">
            <argument name="index" value="8"/>
            <argument name="conditionDegree" value="1--1--8"/>
            <argument name="attribute" value="Phone Number"/>
            <argument name="valueCondition" value="{{US_Address_TX.telephone}}"/>
        </actionGroup>
        <!-- Add condition {Customer Address:[Zip/Postal Code|is|%postcode%]} -->
        <actionGroup ref="FillAddressConditionWithIsInCustomerSegmentActionGroup" stepKey="9thCondition">
            <argument name="index" value="9"/>
            <argument name="conditionDegree" value="1--1--9"/>
            <argument name="attribute" value="Zip/Postal"/>
            <argument name="valueCondition" value="{{US_Address_TX.postcode}}"/>
        </actionGroup>

        <!--Click 'Save and Continue Edit' button -->
        <click selector="{{AdminMainActionsSection.saveAndContinue}}" stepKey="saveSegment"/>
        <see userInput="You saved the segment." selector="{{AdminMessagesSection.success}}" stepKey="checkSuccessMessage"/>
        <actionGroup ref="CliConsumerStartActionGroup" stepKey="startMessageQueue">
            <argument name="consumerName" value="{{AdminCustomerSegmentConsumerData.consumerName}}"/>
            <argument name="maxMessages" value="{{AdminCustomerSegmentConsumerData.messageLimit}}"/>
        </actionGroup>
        <reloadPage stepKey="refreshPage"/>
        <waitForPageLoad stepKey="waitForPageLoaded"/>
        <actionGroup ref="AdminCheckCustomerInSegmentActionGroup" stepKey="checkCustomerInSegment">
            <argument name="customer" value="$createCustomer$"/>
        </actionGroup>

        <!--Navigate to MARKETING->Cart Price Rule and click "+", then fill all required data according to dataset and save rule-->
        <actionGroup ref="AdminCreateCartPriceRuleAndStayOnEditActionGroup" stepKey="createCartPriceRule">
            <argument name="ruleName" value="SegmentCartPriceRule"/>
        </actionGroup>

        <actionGroup ref="SetCartAttributeConditionWithSegmentForCartPriceRuleActionGroup" stepKey="setSegment">
            <argument name="attributeName" value="Customer Segment"/>
            <argument name="value" value="CustomerSegmentDefault"/>
        </actionGroup>

        <!--Perform assertions-->
        <actionGroup ref="LoginToStorefrontActionGroup" stepKey="loginAsCustomer">
            <argument name="Customer" value="$createCustomer$"/>
        </actionGroup>

        <amOnPage url="{{StorefrontCategoryPage.url($createCategory.name$)}}" stepKey="onCategoryPage"/>
        <waitForPageLoad stepKey="waitForCategoryPageLoad"/>
        <actionGroup ref="StorefrontAddSimpleProductToCartActionGroup" stepKey="addProductToCart">
            <argument name="product" value="$createProduct$"/>
        </actionGroup>

        <!-- Check total price in Cart -->
        <actionGroup ref="StorefrontOpenCartFromMinicartActionGroup" stepKey="openCart"/>
        <actionGroup ref="StorefrontCheckCartDiscountAndSummaryActionGroup" stepKey="checkTotalPrice">
            <argument name="product" value="$$createProduct$$"/>
            <argument name="total" value="10.00"/>
            <argument name="discount" value="5.00"/>
        </actionGroup>
    </test>
</tests>
