<?xml version="1.0" encoding="UTF-8"?>
<!--
 /**
  * Copyright Â© Magento, Inc. All rights reserved.
  * See COPYING.txt for license details.
  */
-->
<tests xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
        xsi:noNamespaceSchemaLocation="urn:magento:mftf:Test/etc/testSchema.xsd">
    <test name="CheckingRMAPrintTest">
        <annotations>
            <features value="Rma"/>
            <stories value="MAGETWO-91675: [Julbo]Exception when try to print RMA"/>
            <title value="Checking Returns Print"/>
            <description value="RMA file should be downloaded"/>
            <severity value="MAJOR"/>
            <testCaseId value="MAGETWO-94896"/>
            <group value="rma"/>
        </annotations>
        <before>
            <createData entity="_defaultCategory" stepKey="createCategory"/>
            <createData entity="_defaultProduct" stepKey="createProduct">
                <requiredEntity createDataKey="createCategory"/>
            </createData>
            <!--Log In-->
            <actionGroup ref="AdminLoginActionGroup" stepKey="login"/>
            <!--Enable RMA on frontend-->
            <createData entity="RmaSettingsConfig" stepKey="configureRmaSettings"/>
            <actionGroup ref="CliCacheFlushActionGroup" stepKey="flushCache">
                <argument name="tags" value=""/>
            </actionGroup>
        </before>

        <!--Go to Stores -> Attributes -> Returns. In Condition attribute change Values Required and Show on Storefront to NO-->
        <actionGroup ref="SetAdminReturnAttributesConditionConfig" stepKey="setAdminReturnAttributesConditionConfigNo">
            <argument name="valueRequiredItem" value="0"/>
            <argument name="showOnStorefrontItem" value="0"/>
        </actionGroup>

        <!--Proceed to Admin panel > SALES > Orders. Created order should be in Processing status-->
        <amOnPage url="{{AdminOrderCreatePage.url}}" stepKey="navigateToSalesOrderPage"/>
        <waitForPageLoad stepKey="waitForSalesOrderPageLoaded"/>

        <click selector="{{AdminOrderFormActionSection.CreateNewCustomer}}" stepKey="clickCreateCustomer"/>
        <waitForElementVisible stepKey="waitForNewOrderPageOpened" selector="{{NewOrderSection.submitOrder}}"/>
        <see selector="{{AdminHeaderSection.pageTitle}}" userInput="Create New Order" stepKey="seeNewOrderPageTitle"/>

        <!--Check if order can be submitted without the required fields including email address-->
        <scrollToTopOfPage stepKey="scrollToTopOfOrderFormPage" after="seeNewOrderPageTitle"/>
        <actionGroup ref="AddSimpleProductToOrderActionGroup" stepKey="addFirstProductToOrder" after="scrollToTopOfOrderFormPage">
            <argument name="product" value="$$createProduct$$"/>
        </actionGroup>

        <!--Fill customer group and customer email-->
        <selectOption selector="{{AdminOrderFormAccountSection.group}}" userInput="{{GeneralCustomerGroup.code}}" stepKey="selectCustomerGroup" after="addFirstProductToOrder"/>
        <fillField selector="{{AdminOrderFormAccountSection.email}}" userInput="{{Simple_US_Customer.email}}" stepKey="fillCustomerEmail" after="selectCustomerGroup"/>

        <!--Fill customer address information-->
        <actionGroup ref="FillOrderCustomerInformationActionGroup" stepKey="fillCustomerAddress" after="fillCustomerEmail">
            <argument name="customer" value="Simple_US_Customer"/>
            <argument name="address" value="US_Address_TX"/>
        </actionGroup>
        <grabTextFrom selector="|Order # (\d+)|" stepKey="getOrderId"/>

        <!-- Select shipping -->
        <actionGroup ref="OrderSelectFlatRateShippingActionGroup" stepKey="selectFlatRateShipping" after="fillCustomerAddress"/>

        <!-- Checkout select Check/Money Order payment -->
        <actionGroup ref="SelectCheckMoneyPaymentMethodActionGroup" after="selectFlatRateShipping" stepKey="selectCheckMoneyPayment"/>

        <!--Click *Submit Order* button-->
        <click selector="{{AdminOrderFormActionSection.SubmitOrder}}" stepKey="clickSubmitOrder" after="selectCheckMoneyPayment"/>

        <!--Click *Invoice* button-->
        <click selector="{{AdminOrderDetailsMainActionsSection.invoice}}" stepKey="clickInvoiceButton"/>
        <see selector="{{AdminHeaderSection.pageTitle}}" userInput="New Invoice" stepKey="seeNewInvoiceInPageTitle" after="clickInvoiceButton"/>
        <waitForPageLoad stepKey="waitForInvoicePageOpened"/>

        <click selector="{{AdminInvoiceMainActionsSection.submitInvoice}}" stepKey="clickSubmitInvoice"/>
        <see userInput="The invoice has been created." stepKey="seeCorrectMessage"/>

        <click selector="{{AdminOrderDetailsMainActionsSection.ship}}" stepKey="clickShipAction"/>
        <seeInCurrentUrl url="{{AdminShipmentNewPage.url}}" stepKey="seeOrderShipmentUrl"/>

        <!--Submit Shipment-->
        <click selector="{{AdminShipmentMainActionsSection.submitShipment}}" stepKey="clickSubmitShipment"/>
        <!--Shipment created successfully-->
        <seeInCurrentUrl url="{{AdminOrderDetailsPage.url}}" stepKey="seeViewOrderPageShipping"/>
        <see selector="{{AdminOrderDetailsMessagesSection.successMessage}}" userInput="The shipment has been created." stepKey="seeShipmentCreateSuccess"/>

        <!--Login to frontend and create returns-->
        <amOnPage stepKey="navigateToReturnPage" url="{{AdminReturnsPage.url}}"/>
        <waitForPageLoad stepKey="waitForReturnsPageLoaded"/>

        <click selector="{{AdminNewReturnOrderInformationSection.addNewReturns}}" stepKey="clickCreateReturns" before="waitForReturnsPageLoaded"/>
        <seeInCurrentUrl url="{{AdminReturnChooseOrderPage.url}}" stepKey="seeNewReturnPage" after="clickCreateReturns"/>

        <fillField selector="{{AdminNewReturnOrderInformationSection.searchOrder}}" userInput="{$getOrderId}" stepKey="fillOrderNum"/>
        <click selector="{{AdminNewReturnOrderInformationSection.searchButton}}" stepKey="submitSearchOrderNum"/>
        <waitForLoadingMaskToDisappear stepKey="waitForLoadingMaskToDisappearOnSearch"/>
        <click selector="{{AdminNewReturnOrderInformationSection.firstRow}}" stepKey="clickOrderRow"/>
        <waitForPageLoad stepKey="waitForOrderOpened"/>
        <click selector="{{AdminReturnInformationSection.returnItems}}" stepKey="clickReturnItemsTab" after="waitForOrderOpened"/>
        <click selector="{{AdminReturnItemsSection.addProducts}}" stepKey="clickAddReturnProducts" after="clickReturnItemsTab"/>
        <fillField selector="{{AdminReturnItemsSection.productNameFilter}}" userInput="$$createProduct.name$$" stepKey="filterReturnItemsGrid" after="clickAddReturnProducts"/>
        <checkOption selector="{{AdminReturnItemsSection.selectRow('1')}}" stepKey="selectSimpleProductReturn" after="filterReturnItemsGrid"/>

        <click selector="{{AdminReturnItemsSection.addSelectedProducts}}" stepKey="clickAddSelectedProductsToReturn" after="selectSimpleProductReturn"/>
        <actionGroup ref="checkReturnItemRequiredFields" stepKey="checkReturnItemRequiredFields" after="clickAddSelectedProductsToReturn"/>
        <fillField selector="{{AdminReturnItemsSection.requested('1')}}" userInput="{{SampleReturnItem.qty_requested}}" stepKey="fillRequestedReturnQty" after="checkReturnItemRequiredFields"/>
        <selectOption selector="{{AdminReturnItemsSection.returnReason('1')}}" userInput="{{SampleReturnItem.reason}}" stepKey="selectReturnReason" after="fillRequestedReturnQty"/>
        <fillField selector="{{AdminReturnItemsSection.returnReasonOther('1')}}" userInput="{{SampleReturnItem.reason_other}}" stepKey="fillReturnReason" after="selectReturnReason"/>
        <selectOption selector="{{AdminReturnItemsSection.itemCondition('1')}}" userInput="{{SampleReturnItem.condition}}" stepKey="selectReturnItemCondition" after="fillReturnReason"/>
        <selectOption selector="{{AdminReturnItemsSection.resolution('1')}}" userInput="{{SampleReturnItem.resolution}}" stepKey="selectReturnResolution" after="selectReturnItemCondition"/>
        <click selector="{{AdminNewReturnMainActionsSection.submitReturns}}" stepKey="clickSubmitReturns" after="selectReturnResolution"/>
        <waitForPageLoad stepKey="waitForSubmit"/>
        <see userInput="You submitted the RMA request." stepKey="seeSuccessMessageReturnOrder"/>

        <!--Go to Admin -> Sales -> Returns-->
        <amOnPage stepKey="goToReturnPage" url="{{AdminReturnsPage.url}}"/>
        <waitForPageLoad stepKey="waitForReturnsPageLoad"/>
        <!--Open new created return-->
        <click selector="{{AdminReturnGridFilterSection.resetFilter}}" stepKey="clearExistingRmaFilters" after="waitForReturnsPageLoad"/>
        <fillField selector="{{AdminReturnGridFilterSection.orderIdFilter}}" userInput="$getOrderId" stepKey="fillOrderIdRmaFilter" after="clearExistingRmaFilters"/>
        <see selector="{{AdminReturnGridSection.rowOrderId('1')}}" userInput="$getOrderId" stepKey="seeReturnInGrid" after="fillOrderIdRmaFilter"/>
        <see selector="{{AdminReturnGridSection.rowStatus('1')}}" userInput="Pending" stepKey="seeReturnStatusPending" after="seeReturnInGrid"/>
        <click selector="{{AdminReturnGridSection.rowViewAction('1')}}" stepKey="clickViewReturnFromGrid" after="seeReturnStatusPending"/>
        <waitForPageLoad stepKey="waitForReturnTicketPageOpened"/>

        <!--Click "Print" button.-->
        <click selector="{{AdminEditReturnMainActionsSection.print}}" stepKey="clickPrintButton"/>

        <!--Verify that rma.pdf file with return information is downloaded without error-->
        <dontSeeJsError stepKey="dontSeeJsError"/>

        <after>
            <!--Set default Return Attributes Condition item config-->
            <actionGroup ref="SetAdminReturnAttributesConditionConfig" stepKey="setAdminReturnAttributesConditionConfigDefault">
                <argument name="valueRequiredItem" value="1"/>
                <argument name="showOnStorefrontItem" value="1"/>
            </actionGroup>
            <deleteData createDataKey="createProduct" stepKey="deleteProduct"/>
            <deleteData createDataKey="createCategory" stepKey="deleteCategory"/>
            <!--Restore default config rma-->
            <createData entity="RestoreDefaultRmaSettingsConfig" stepKey="restoreDefaultConfigureRmaSettings"/>
            <!--Log out-->
            <actionGroup ref="AdminLogoutActionGroup" stepKey="logout"/>
            <!--Clear Cache-->
            <actionGroup ref="CliCacheFlushActionGroup" stepKey="flushCache">
                <argument name="tags" value=""/>
            </actionGroup>
        </after>
    </test>
</tests>
