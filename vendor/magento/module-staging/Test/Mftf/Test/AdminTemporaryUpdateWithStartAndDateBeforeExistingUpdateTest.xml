<?xml version="1.0" encoding="UTF-8"?>
<!--
 /**
  * Copyright Â© Magento, Inc. All rights reserved.
  * See COPYING.txt for license details.
  */
-->

<tests xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xsi:noNamespaceSchemaLocation="urn:magento:mftf:Test/etc/testSchema.xsd">
    <test name="AdminTemporaryUpdateWithStartAndDateBeforeExistingUpdateTest">
        <annotations>
            <features value="Staging"/>
            <stories value="Staging updates"/>
            <title value="Temporary Update with start and end date before existing update."/>
            <description value="Temporary Update with start and end date before existing update."/>
            <severity value="BLOCKER"/>
            <testCaseId value="MAGETWO-55022"/>
            <group value="staging"/>
        </annotations>
        <before>
            <!--Create Simple Product and Category-->
            <createData entity="_defaultCategory" stepKey="createCategory"/>
            <createData entity="ApiProductWithDescription" stepKey="createProduct">
                <requiredEntity createDataKey="createCategory"/>
                <field key="price">10</field>
            </createData>
            <actionGroup ref="AdminLoginActionGroup" stepKey="loginAsAdmin"/>
            <!-- Create storeView -->
            <actionGroup ref="AdminCreateStoreViewActionGroup" stepKey="createStoreView"/>
        </before>
        <after>
            <deleteData createDataKey="createProduct" stepKey="deleteProduct"/>
            <deleteData createDataKey="createCategory" stepKey="deleteCategory"/>
            <actionGroup ref="AdminDeleteStoreViewActionGroup" stepKey="deleteStoreView"/>
            <actionGroup ref="AdminClearFiltersActionGroup" stepKey="clearProductFilters"/>
            <actionGroup ref="AdminLogoutActionGroup" stepKey="logout"/>
        </after>
        <!-- Open Product Grid, Filter product and open -->
        <actionGroup ref="SearchForProductOnBackendActionGroup" stepKey="filterProduct">
            <argument name="product" value="$$createProduct$$"/>
        </actionGroup>
        <click selector="{{AdminProductGridSection.productGridNameProduct('$$createProduct.name$$')}}" stepKey="openProductForEdit"/>
        <!-- Create Schedule New Update -->
        <click selector="{{AdminStagingSlideOutSection.scheduleNewUpdateBtn}}" stepKey="clickButtonSheduleNewUpdate"/>
        <click selector="{{AdminStagingSlideOutSection.changeStoreButton}}" stepKey="clickStoreSwitcher"/>
        <click selector="{{AdminStagingSlideOutSection.selectStoreView(customStore.name)}}" stepKey="clickStoreView"/>
        <waitForElementVisible selector="{{AdminConfirmationModalSection.ok}}" stepKey="waitForElementVisible"/>
        <click selector="{{AdminConfirmationModalSection.ok}}" stepKey="acceptMessage"/>
        <generateDate date="+1 day" format="m/j/Y g:i A" stepKey="generateStartDate"/>
        <generateDate date="+3 day" format="m/j/Y g:i A" stepKey="generateEndDate"/>
        <actionGroup ref="FillScheduleUpdateWithCheckEndActionGroup" stepKey="createScheduleUpdate">
            <argument name="staging" value="S5UpdateNameStaging"/>
            <argument name="timeStart" value="{$generateStartDate}"/>
            <argument name="timeEnd" value="{$generateEndDate}"/>
            <argument name="productPrice" value="14"/>
        </actionGroup>
        <!-- Create Schedule New Update1 -->
        <generateDate date="+1 hour" format="m/j/Y g:i A" stepKey="generateNewStartDate"/>
        <generateDate date="+2 hour" format="m/j/Y g:i A" stepKey="generateNewEndDate"/>
        <actionGroup ref="FillScheduleUpdateWithCheckEndActionGroup" stepKey="createScheduleUpdate1">
            <argument name="staging" value="S8UpdateNameStaging"/>
            <argument name="timeStart" value="{$generateNewStartDate}"/>
            <argument name="timeEnd" value="{$generateNewEndDate}"/>
        </actionGroup>
    </test>
</tests>
