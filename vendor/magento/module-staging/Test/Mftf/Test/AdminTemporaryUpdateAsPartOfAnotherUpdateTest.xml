<?xml version="1.0" encoding="UTF-8"?>
<!--
 /**
  * Copyright Â© Magento, Inc. All rights reserved.
  * See COPYING.txt for license details.
  */
-->

<tests xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xsi:noNamespaceSchemaLocation="urn:magento:mftf:Test/etc/testSchema.xsd">
    <test name="AdminTemporaryUpdateAsPartOfAnotherUpdateTest">
        <annotations>
            <stories value="Create shedule update"/>
            <stories value="Edit shedule update"/>
            <title value="Create Update as a part of another Update"/>
            <description value="The purpose of this end-to-end scenario is testing of ability to create Staging Update from single update in the example of single product update"/>
            <severity value="BLOCKER"/>
            <testCaseId value="MAGETWO-55074"/>
            <group value="staging"/>
        </annotations>
        <before>
            <createData entity="_defaultCategory" stepKey="createCategory"/>
            <createData entity="SimpleProduct" stepKey="createProduct">
                <requiredEntity createDataKey="createCategory"/>
                <field key="price">10</field>
            </createData>
            <createData entity="_defaultProduct" stepKey="createDefaultProduct">
                <requiredEntity createDataKey="createCategory"/>
                <field key="price">20</field>
            </createData>
        </before>
        <after>
            <deleteData createDataKey="createProduct" stepKey="deleteProduct"/>
            <deleteData createDataKey="createDefaultProduct" stepKey="deleteDefaultProduct"/>
            <deleteData createDataKey="createCategory" stepKey="deleteCategory"/>
            <actionGroup ref="AdminClearFiltersActionGroup" stepKey="clearProductFilters"/>
            <actionGroup ref="StagingDashboardClearFiltersActionGroup" stepKey="clearStagingFilters"/>
            <actionGroup ref="AdminLogoutActionGroup" stepKey="logout"/>
        </after>
        <!-- 1. Login to Magento backend -->
        <actionGroup ref="AdminLoginActionGroup" stepKey="loginAsAdmin"/>
        <!-- 2. Navigate to Catalog > Products page -->
        <!-- 3. Click on "Edit" link for product with name ProductName -->
        <actionGroup ref="SearchForProductOnBackendActionGroup" stepKey="searchProduct">
            <argument name="product" value="$$createProduct$$"/>
        </actionGroup>
        <click selector="{{AdminProductGridSection.productGridNameProduct('$$createProduct.name$$')}}" stepKey="openProductForEdit"/>
        <seeElement selector="{{AdminStagingSlideOutSection.scheduledChanges}}" stepKey="seeBlockSheduledChanges"/>
        <dontSeeElement selector="{{AdminStagingSlideOutSection.contentBlock}}" stepKey="dontSeeContentBlock"/>
        <!-- 4. Click on "Schedule New Update" button -->
        <!-- 5. Fill New update with data -->
        <!-- 6. Click on "Save" button -->
        <generateDate date="+10 minutes" format="m/j/Y g:i A" stepKey="generateStartDate"/>
        <generateDate date="+13 minutes" format="m/j/Y g:i A" stepKey="generateEndDate"/>
        <actionGroup ref="FillScheduleUpdateWithCheckEndActionGroup" stepKey="fillScheduleUpdate">
            <argument name="staging" value="S5UpdateNameStaging"/>
            <argument name="timeStart" value="{$generateStartDate}"/>
            <argument name="timeEnd" value="{$generateEndDate}"/>
            <argument name="productPrice" value="11"/>
        </actionGroup>
        <!-- 7.  Click on "Schedule New Update" button -->
        <!-- 8. In Slide panel fill new update with data -->
        <!-- 9. Click on "Save" button -->
        <generateDate date="+7 minutes" format="m/j/Y g:i A" stepKey="generateStartDateForS8"/>
        <actionGroup ref="FillScheduleUpdateWithCheckActionGroup" stepKey="fillScheduleUpdateWithoutEnd">
            <argument name="staging" value="S8UpdateNameStaging"/>
            <argument name="timeStart" value="{$generateStartDateForS8}"/>
        </actionGroup>
        <!-- 10. Navigate to Catalog > Products page -->
        <!-- 11. Click on "Edit" link for product with name P3ProductName -->
        <actionGroup ref="SearchForProductOnBackendActionGroup" stepKey="searchDefaultProduct">
            <argument name="product" value="$$createDefaultProduct$$"/>
        </actionGroup>
        <click selector="{{AdminProductGridSection.productGridNameProduct('$$createDefaultProduct.name$$')}}" stepKey="openDefaultProductForEdit"/>
        <seeElement selector="{{AdminStagingSlideOutSection.scheduledChanges}}" stepKey="seeSheduleChangesBlock"/>
        <dontSeeElement selector="{{AdminStagingSlideOutSection.contentBlock}}" stepKey="dontSeeSheduleUpdates"/>
        <!-- 12. Click on "Schedule New Update" button -->
        <!-- 13. Select "Assign to Existing Update" option -->
        <!-- 14. Click on "Select" button for S5UpdateName -->
        <!-- 15. Change product price for update -->
        <!-- 16. Click on "Save" button -->
        <actionGroup ref="AssignToExistingUpdateCheckActionGroup" stepKey="assignScheduleUpdate">
            <argument name="staging" value="S5UpdateNameStaging"/>
            <argument name="productPrice" value="21"/>
        </actionGroup>
        <!-- 17. Navigate to Content > Dashboard page -->
        <actionGroup ref="StagingDashboardSearchUpdateActionGroup" stepKey="searchStagingUpdate8">
            <argument name="staging" value="S8UpdateNameStaging"/>
        </actionGroup>
        <!-- 18. Click on S5UpdateName -->
        <actionGroup ref="StagingDashboardVerifyHoverContentActionGroup" stepKey="searchStagingUpdate5">
            <argument name="staging" value="S5UpdateNameStaging"/>
            <argument name="objectsQty" value="2"/>
            <argument name="productsQty" value="2"/>
        </actionGroup>
        <!-- 19. Click on "View/Edit" button for S5UpdateName -->
        <actionGroup ref="VerifyStagingUpdateAndIncludedProductActionGroup" stepKey="verifyStagingUpdate1Product">
            <argument name="includedProduct" value="$createProduct$"/>
            <argument name="stagingUpdate" value="S5UpdateNameStaging"/>
            <argument name="startDate" value="{$generateStartDate}"/>
            <argument name="endDate" value="{$generateEndDate}"/>
        </actionGroup>
        <see selector="{{AdminProductGridSection.productGridNameProduct('$$createDefaultProduct.name$$')}}" userInput="$$createDefaultProduct.name$$"  stepKey="seeUpdateDefaultProduct"/>
        <see selector="{{AdminStagingEditSection.selectButton('2')}}" userInput="Select" stepKey="seeSelectForDefaultProduct"/>
        <!-- 20. Change Update data -->
        <!-- 21. Click on "Save" button -->
        <generateDate date="+8 minutes" format="m/j/Y g:i A" stepKey="generateStartDateForEdit"/>
        <generateDate date="+8 minutes" format="M j, Y g:i A" stepKey="generateStartDateForEditCheck"/>
        <actionGroup ref="EditSheduleUpdateActionGroup" stepKey="editScheduleUpdateWithoutEnd">
            <argument name="staging" value="S18UpdateNameStaging"/>
            <argument name="timeStart" value="{$generateStartDateForEdit}"/>
        </actionGroup>
        <!-- 22. Click on S18.1UpdateName bar -->
        <!-- 23. Run cron twice -->
        <magentoCLI command="cron:run" arguments="--group staging" stepKey="cronRun"/>
        <magentoCLI command="cron:run" arguments="--group staging" stepKey="cronRunTwice"/>
        <actionGroup ref="StagingDashboardVerifyHoverContentActionGroup" stepKey="verifyHoverContentForS18">
            <argument name="staging" value="S18UpdateNameStaging"/>
            <argument name="objectsQty" value="2"/>
            <argument name="productsQty" value="2"/>
        </actionGroup>
        <!-- 24. Click on "Preview" button for S18.1UpdateName -->
        <click selector="{{AdminContentStagingDashboardSection.stagingEventsActions(S18UpdateNameStaging.updateName, 'Preview')}}" stepKey="clickPreviewS18"/>
        <actionGroup ref="VerifyStagingUpdateDateAndPriceActionGroup" stepKey="verifyStagingUpdate3DateAndPrice">
            <argument name="category" value="$createCategory$"/>
            <argument name="product" value="$createProduct$"/>
            <argument name="previewDate" value="{$generateStartDateForEditCheck}"/>
            <argument name="expectedPrice" value="11"/>
        </actionGroup>
        <!-- 25. Find product P3ProductName on category page with name P1CategoryName -->
        <see selector="{{StorefrontCategoryProductSection.ProductTitleByName('$$createProduct.name$$')}}" userInput="$$createProduct.name$$" stepKey="seeProductName"/>
        <see selector="{{StorefrontCategoryProductSection.ProductTitleByName('$$createDefaultProduct.name$$')}}" userInput="$$createDefaultProduct.name$$" stepKey="seeDefaultProductName"/>
        <see selector="{{StorefrontCategoryProductSection.ProductPriceByName('$$createDefaultProduct.name$$')}}" userInput="21" stepKey="seeDefaultProductPrice"/>
    </test>
</tests>
